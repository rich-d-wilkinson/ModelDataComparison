{
    "collab_server" : "",
    "contents" : "## GP Fitted to Simulated Data and the Paleo-climate data. In addition, the composite likelihood is calculated for the kriging output.\n#\n# 27/02/2017 : Phillip\n#\n################################################################################################################\nsource(\"CompNLL_Func.R\")\nset.seed(1)\n\n################################################################################################################\n# A. Simulated Lon,Lat Data:\n#\n# A.1. Simulate the data:\nn <- 1000\nx <- runif(n,-5,5)\ny <- runif(n,-5,5)\nz <- runif(n,-5,5)\nxyz <- cbind(x,y,z)\n#names(xyz) <- c(\"x\",\"y\",\"z\")\n#convert this to the (lon,lat):\ntheta.phi <- Convert_to_lon_lat2(xyz) #assume the sphere has radius 1 (and the results is in radians)\n#I believe the code needs degrees (in proj4string inside sp package):\n#convert radians to degrees:\nlon.lat <- rad2deg(theta.phi) #code resticts to the range given below:\n##############\n# plot locations on the sphere:\ninstall.packages(\"sphereplot\")\nrgl.sphgrid()\nrgl.sphpoints(cbind(lon.lat,array(1,dim=c(n,1))),deg=TRUE,col='red',cex=2)\n##############\nlon.lat <- data.frame(lon.lat) #convert to dataframe to apply coordinates\ncoordinates(lon.lat) <- c(\"lon\",\"lat\")\nproj4string(lon.lat) <- CRS('+proj=longlat +datum=WGS84 +ellps=WGS84') #this is a lon,lat grid coordinate reference system for the Earth (I believe.)\nmodel.choice <- vgm(psill =  0.99, \"Exp\", range = 0.95, kappa = 0.05, nugget = 0.05) #chosen from plot of empirical variogram\ng.dummy <- gstat(formula = val~1, dummy = TRUE, beta = 0, model = model.choice, nmax = 10) # for speed -- 10 is too small!!\n#The predict code uses is.projected to check for lon,lat coordinates (I think in degrees)\nval <- predict(g.dummy, lon.lat, nsim = 1)\nvgm.data <- cbind(val@coords, val@data$sim1)\ncolnames(vgm.data) <- c(\"lon\",\"lat\",\"value\")\nvgm.data <- data.frame(vgm.data)\nattach(vgm.data)\ncoordinates(vgm.data) = ~ lon + lat\n#################\n#plottingh sample vgm: Not sure how to get this working. Still don't know what variogram function/parameters we want.\nvgm.exp <- variogram(value ~ 1, data = vgm.data)  \nmodel.choice <- vgm(psill =  0.99, \"Exp\", range = 0.95, kappa = 0.05, nugget = 0.05) #chosen from plot of empirical variogram\nfit.vgm.exp <- fit.variogram(vgm.exp, model = model.choice)\n#Plotting the variogram for the data:\nplot(vgm.exp, model = fit.vgm.exp)\n#Plot shows that we have very fast (in the spatial sense) falling away of correlation between points. Maybe too much. \n#################\n#\n# A.3. Prediction locations and kriging:\n#\ndata3 <- cbind(val@coords, val@data$sim1)\ncolnames(data3) <- c(\"p\",\"q\",\"val\")\nn <- length(theta.phi[,1])\nR <- 500 #number of prediction locations\nkeep <- sample(1:n, R, replace=F)\ndata.pred <- data3[keep,]\ndata.pred.points <- data.frame(data.pred)\ndata.fit <- data3[-keep,]\ndata.fit <- data.frame(data.fit)\nattach(data.fit)\ncoordinates(data.fit) = ~ p + q\nattach(data.pred.points)\ncoordinates(data.pred.points) = ~ p + q \nproj4string(data.pred.points) <- CRS(\"+init=epsg:4326\") #this is a lon,lat grid projection of the Earth (I believe.)\nproj4string(data.fit) <- CRS(\"+init=epsg:4326\") #this is a lon,lat grid projection of the Earth (I believe.)\nm1.krige <- krige(val ~ 1, locations=data.fit, newdata=data.pred.points[.1], model = model.choice)\n#I think this doesnt work because it tries to look at location (lon,lat,0), i.e. it appends a third dimension with entry 0. \n# diagnostics of problem:\nanyDuplicated(data3[,1])\nanyDuplicated(data3[,2])\nlength(data3[,1])\nlength(unique(data3[,1])) \nduplicated(data3[,1:2]) | duplicated(data3[,1:2], fromLast = TRUE)\n#There may be many duplicated entries. This is why it doesn't work sometimes.\n#\n# Changing the simulated data to exclude all duplicates seems to have fixed the singular covariance matrix problem. \n#\n#\n# A.4. Calculate the Composite Likelihood:\n#\npred.data <- cbind(data.pred[,1:2], t(t(m1.krige@data$var1.pred)))\nnames(pred.data) <- c(\"x.loc\",\"y.loc\",\"val\")\n\n# Calculate full likelihood \"by-hand\":\nptm <- proc.time()\ndist.mat <- dist2(pred.data[,1:2],pred.data[,1:2],method=\"euclidean\")\nCov.mat <- maternCov(dist.mat,c(3,1,1))  \nreal.NegLogLik <- 1/2*log(det(Cov.mat)) + 1/2*t(pred.data[,3])%*%solve(Cov.mat)%*%pred.data[,3] \nproc.time() - ptm\n\n# Calculate Full Likelihood using composite code with 1x2 blocks:\nptm <- proc.time()\nfull.NegLogLik <- composite.nll(pred.data,c(2,1),\"Matern\",c(3,1,1)) #Agrees with real.NegLogLik at least. \nproc.time() - ptm\n\n# Calculate Composite Likelihood of Nieghbouring blocks:\nptm <- proc.time()\ncomposite.NegLogLik <- composite.nll(pred.data, c(3,2), \"Matern\", c(3,1,1))  \nproc.time() - ptm\n\n#Times for a large dataset: (n = 500)\n# Real : T = 1.34 (elapsed) and -ell = -0.148\n# Full : T = 0.4 and -ell = -0.297\n# Composite (3x2) : T = 0.21 and -ell = -0.594 \n#\n#\n# A.5. How good is the kriging predictions?\n#\nerror <- t(t(m1.krige$var1.pred - data.pred[,3]))\nmean.error <- mean(error)\nmedian.error <- median(error)\nMSE <- 1/R*sqrt(sum(t(t(m1.krige$var1.pred - data.pred[,3]))^2))\n################################################################################################################\n################################################################################################################\n# B. Using the Real Data:\n# install.packages(\"maptools\")\n# 1. Load the data:\n# Observations\n# -------------\n# Observations need to have points in a list of 4 columns with headers \"x,y,z,std\" = lon, lat, observation, uncertainty\n# Observations are stored in directory Observation_Data/<Obs_set> with filenames <obs>.txt\nObs_set='P3+_SST_anom'\nobs = c('lambda_100', 'lambda_90', 'lambda_80', 'lambda_70', 'lambda_60', 'lambda_50', 'lambda_40', 'lambda_30', 'lambda_20', 'lambda_10')\nj <- 1 #one time instance. \n# READ OBSERVATIONS\nObs <- read.table(paste0(\"Observation_data/\",Obs_set,\"/\",obs[j],\".txt\"),header=T)\n\n#create a spatial points data frame object:\nz.dataframe <- data.frame(Obs$z)\ny_obs.sp = SpatialPointsDataFrame(cbind(Obs$x,Obs$y), z.dataframe, coords.nrs = numeric(0), CRS('+proj=longlat +datum=WGS84 +ellps=WGS84'))\ncoordinates(y_obs.sp) ~ lon + lat\nsummary(y_obs.sp)\nis.projected(y_obs.sp) #FALSE as expected\n# 2. Find the best fitting variogram model:\nvgm.sample <- variogram(Obs.z ~ 1, data = y_obs.sp, cutoff = 500, width = 25 )  \n#line of best fit:\nmodel.fit <- vgm(\"Exp\") #if we enter no parameters then fit.variogram is called for the chosen model to estimate the parameters\nmodel.choice <- vgm(psill =  9, \"Exp\", range = 5.5, nugget = 1.5) #chosen from plot of empirical variogram\nmodel.choice <- vgm(psill =  1.7, \"Exp\", range = 5.5, fit.range = FALSE) #chosen from plot of empirical variogram\n#This is singular if we include the nugget effect. Why is this? Can we fix this?\nfit.vgm.exp <- fit.variogram(vgm.sample, model = model.choice)\nplot(vgm.sample)\n#Plotting the variogram for the data:\nplot(vgm.exp, model = fit.vgm.exp)\n# help(fit.variogram) # - check the help section on singular model fits\n#\n# 3. Kriging:\nkeep <- runif(10,1,95)\ndata.pred <- y_obs.sp@coords[keep,]\ndata.pred.points <- data.frame(data.pred)\ndata.fit <- y_obs.sp[-keep,]\ncolnames(data.pred.points) <- c(\"lon\",\"lat\")\ndata.fit <- data.frame(data.fit)\nattach(data.fit)\ncoordinates(data.fit) = ~ lon + lat\nattach(data.pred.points)\ncoordinates(data.pred.points) = ~ lon + lat\nm1.krig <- krige(Obs.z ~ 1, data.fit, data.pred.points, model = model.choice)\nm1.krig\n#\n# 4. Composite likelihood calculation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1488447921010.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "701765543",
    "id" : "35BBE7A9",
    "lastKnownWriteTime" : 1488463237,
    "last_content_update" : 1488463237125,
    "path" : "C:/Users/sm1pjp/Google Drive/Paelo Stuff/DMC/Scripts/fitGP_compLogLik_Script_v1.R",
    "project_path" : "fitGP_compLogLik_Script_v1.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}